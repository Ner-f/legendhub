<!doctype html>
<html lang="en">
    <head>
        <%- include("../shared/meta"); -%>
        <%if (vm.item) {%>
        <link href="https://www.legendhub.org/items/edit.html?id=<%-vm.item.id%>" rel="canonical">
        <%}else{%>
        <link href="https://www.legendhub.org/items/add.html" rel="canonical">
        <%}%>
        <meta name="robots" content="none">
    </head>
    <body ng-app="legendwiki-app" ng-controller="ModifyItemsController as modifyItems" ng-init="modifyItems.init(<%=JSON.stringify(vm.item)%>)">
        <%- include("../shared/header"); -%>
        <div class="container">
            <form name="itemForm" ng-submit="modifyItems.submit()" ng-cloak>
                <div class="row">
                    <% if (vm.item) { %>
                    <h1>Edit Item</h1>
                    <% } else { %>
                    <h1>Add Item</h1>
                    <% } %>
                </div>
                <% for (let i = 0; i < vm.itemStatCategories.length; ++i) {
                    let category = vm.itemStatCategories[i]; %>
                    <%if (category.name === "Weapon") {%>
                    <div ng-show="modifyItems.item.slot === 14 || (modifyItems.item.slot == 15 && modifyItems.item.accuracy > 0)">
                    <% } else { %>
                    <div>
                    <% } %>
                    <div class="row">
                        <h4><%=category.name%></h4>
                    </div>
                    <div class="row">
                        <% if (category.name === "Basic") { %>
                            <div class="form-group col-12 col-md-8 col-lg-4">
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">Name</span>
                                    </div>
                                    <input class="form-control" type="text" name="name" ng-model="modifyItems.item.name" ng-class="{'is-invalid': itemForm.name.$invalid}" required lh-autofocus>
                                </div>
                            </div>
                        <% } %>
                        <% for (let j = 0; j < category.getItemStatInfo.length; ++j) {
                            let stat = category.getItemStatInfo[j];
                            if (stat.editable && stat.var !== "name") {%>
                            <div class="form-group col-6 col-md-4 col-lg-<%- (stat.type === "bool" ? "2" : "3")%>"
                            <% if (stat.var === "holdable" || stat.var === "weaponType" || stat.var === "weaponStat") {%>
                                ng-show="modifyItems.item.slot === 14"
                            <%} else if (stat.var === "accuracy") {%>
                                ng-show="modifyItems.item.slot === 14 || modifyItems.item.slot === 15"
                            <%}%>
                            >
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><%=stat.short%></span>
                                    </div>
                                    <% if (stat.type === "int") { %>
                                    <input type="number" name="<%-stat.var%>" ng-model="modifyItems.item.<%-stat.var%>" class="form-control" ng-class="{'is-invalid': itemForm.<%-stat.var%>.$invalid}" required>
                                    <% } else if (stat.type === "decimal") { %>
                                    <input type="number" name="<%-stat.var%>" ng-model="modifyItems.item.<%-stat.var%>" class="form-control" ng-class="{'is-invalid': itemForm.<%-stat.var%>.$invalid}" ng-pattern="/^[0-9]+(\.[0-9]{1,2})?$/" step="0.01" required>
                                    <% } else if (stat.type === "string") { %>
                                    <input type="text" name="<%-stat.var%>" ng-model="modifyItems.item.<%-stat.var%>" class="form-control" ng-class="{'is-invalid': itemForm.<%-stat.var%>.$invalid}">
                                    <% } else if (stat.type === "bool") { %>
                                    <div class="input-group-append">
                                        <div class="input-group-text">
                                            <input type="checkbox" name="<%-stat.var%>" ng-model="modifyItems.item.<%-stat.var%>">
                                        </div>
                                    </div>
                                    <% } else if (stat.type === "select") { %>
                                    <select name="<%-stat.var%>" ng-model="modifyItems.item.<%-stat.var%>" class="form-control" ng-class="{'is-invalid': itemForm.<%-stat.var%>.$invalid}"<%- (category.name === "Weapon" ? " ng-required='modifyItems.item.slot === 14'" : "") %>>
                                        <option ng-value>Choose a <%=stat.short%></option>
                                        <% for (let k = 0; k < vm.constants.selectOptions[stat.var].length; ++k) { %>
                                        <option ng-value="<%- k %>"><%= vm.constants.selectOptions[stat.var][k] %></option>
                                        <% } %>
                                    </select>
                                    <% } %>
                                </div>
                            </div>
                        <% }} %>
                        <% if (category.name === "Basic") { %>
                            <div class="form-group col-12 col-md-4 col-lg-3">
                                <button class="btn btn-outline-secondary col-12 text-truncate" type="button" data-toggle="modal" data-target="#mobModal">{{modifyItems.item.getMob ? modifyItems.item.getMob.name : "Choose a Mob"}}</button>
                            </div>
                            <div class="form-group col-12 col-md-4 col-lg-3">
                                <button class="btn btn-outline-secondary col-12 text-truncate" type="button" data-toggle="modal" data-target="#questModal">{{modifyItems.item.getQuest ? modifyItems.item.getQuest.title : "Choose a Quest"}}</button>
                            </div>
                        <% } %>
                        </div>
                    </div>
                <% } %>
                <br><br>
                <span>This field supports <a href="https://github.com/showdownjs/showdown/wiki/Showdown's-Markdown-syntax" target="_blank">markdown</a> and <a href="https://github.com/showdownjs/showdown/wiki/Emojis" target="_blank">emoji</a>.</span>
                <div class="row">
                    <div class="col-12 col-lg-6">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Notes</span>
                            </div>
                            <textarea class="form-control" rows="5" ng-model="modifyItems.item.notes"></textarea>
                        </div>
                        <div class="card">
                            <div class="card-header">Preview</div>
                            <div class="card-body" markdown-to-html="modifyItems.item.notes"></div>
                        </div>
                    </div>
                </div>
                <br>
                <div class="row">
                    <button class="btn btn-primary btn-block col-12 offset-md-8 col-md-4 offset-lg-10 col-lg-2" type="submit" ng-disabled="!modifyItems.canSubmit()">Save</button>
                </div>
                <br><br>
            </form>
        </div>
        <%- include("../shared/mobModal"); -%>
        <%- include("../shared/questModal"); -%>
        <%- include("../shared/footer"); -%>
        <%- include("../shared/scripts"); -%>
        <%- include("../shared/markdown"); -%>
        <script>
            (function() {
                angular
                    .module("legendwiki-app")
                    .controller("ModifyItemsController", ModifyItemsController);

                ModifyItemsController.$inject = ["$scope", "$http", "$q", "$cookies"];

                function ModifyItemsController($scope, $http, $q, $cookies) {
                    var vm = this;

                    vm.init = init;
                    vm.canSubmit = canSubmit;
                    vm.submit = submit;
                    vm.searchMobs = searchMobs;
                    vm.onMobSelected = onMobSelected;
                    vm.searchQuests = searchQuests;
                    vm.onQuestSelected = onQuestSelected;

                    function init(item) {
                        vm.edit = item.id != null;

                        vm.item = item;
                        vm.initialItem = angular.copy(vm.item);

                        getItemStatCategories()
                            .then(function(data) {
                                vm.itemStatCategories = data.data.data.getItemStatCategories;
                            })
                            .catch(function(errors) {
                                if (errors)
                                    console.error(errors);
                            });
                    };

                    function getItemStatCategories() {
                        let query = [
                            "{",
                                "getItemStatCategories {",
                                    "name ",
                                    "getItemStatInfo {",
                                        "display ",
                                        "short ",
                                        "var ",
                                        "type ",
                                        "editable ",
                                        "defaultValue ",
                                    "}",
                                "}",
                            "}",
                        ];
                        return $http({
                            url: "/api",
                            method: "POST",
                            data: {"query": query.join("")}
                        });
                    };

                    function canSubmit() {
                        return vm.edit ? canEdit() : canAdd();
                    };

                    function canEdit() {
                        return $scope.itemForm.$valid && angular.toJson(vm.item) !== angular.toJson(vm.initialItem);
                    };
                    
                    function canAdd() {
                        return $scope.itemForm.$valid;
                    };

                    function submit() {
                        if (vm.edit)
                            editItem();
                        else
                            addItem();
                    };

                    function editItem() {
                        if (!canEdit())
                            return;

                        let query = [
                            "mutation {",
                            "updateItem(id:",vm.item.id,",",
                            "authToken:\"",$cookies.get("loginToken"),"\",",
                            "mobId:",(vm.item.mobId != null ? vm.item.mobId : "0"),",",
                            "questId:",(vm.item.questId != null ? vm.item.questId : "0"),",",
                            "notes:\"\"\"",vm.item.notes,"\"\"\","
                        ];
                        
                        for (let i = 0; i < vm.itemStatCategories.length; ++i) {
                            for (let j = 0; j < vm.itemStatCategories[i].getItemStatInfo.length; ++j) {
                                let stat = vm.itemStatCategories[i].getItemStatInfo[j];
                                if (!stat.editable) continue;

                                query.push(stat.var, ":");
                                if(stat.type === "string") {
                                    query.push("\"\"\"", vm.item[stat.var], "\"\"\",");
                                }
                                else if (stat.type ==="bool"){
                                    query.push(vm.item[stat.var] ? "true" : "false", ",");
                                }
                                else {
                                    query.push(vm.item[stat.var] || "0", ",");
                                }
                            }
                        }

                        query.push(") {", "token ", "expires", "}", "}");
                        
                        $http({
                            url: "/api",
                            method: "POST",
                            data: {"query": query.join("")}
                        }).then((response) => {
                            let data = response.data.data.updateItem;
                            let newToken = data.token;
                            let expireDate = data.expires;
                            $cookies.put("loginToken", newToken, {"path": "/", "expires": expireDate, "secure": true, "samesite": "lax"});
                            window.location = "/items/details.html?id=" + vm.item.id;
                        });
                    };

                    function addItem() {
                        if (!canAdd())
                            return;

                        let query = [
                            "mutation {",
                            "insertItem(authToken:\"",$cookies.get("loginToken"),"\",",
                            "mobId:",(vm.item.mobId != null ? vm.item.mobId : "0"),",",
                            "questId:",(vm.item.questId != null ? vm.item.questId : "0"),",",
                            "notes:\"\"\"",vm.item.notes,"\"\"\","
                        ];
                        for (let i = 0; i < vm.itemStatCategories.length; ++i) {
                            for (let j = 0; j < vm.itemStatCategories[i].getItemStatInfo.length; ++j) {
                                let stat = vm.itemStatCategories[i].getItemStatInfo[j];
                                if (!stat.editable) continue;

                                query.push(stat.var, ":");
                                if(stat.type === "string")
                                    query.push("\"\"\"", vm.item[stat.var], "\"\"\",");
                                else if (stat.type ==="bool")
                                    query.push(vm.item[stat.var] ? "true" : "false", ",");
                                else
                                    query.push(vm.item[stat.var] || "0", ",");
                            }
                        }

                        query.push(") {", "id ", "tokenRenewal {", "token ", "expires", "}", "}", "}");

                        $http({
                            url: "/api",
                            method: "POST",
                            data: {"query": query.join("")}
                        }).then((response) => {
                            let data = response.data.data.insertItem;
                            let newToken = data.tokenRenewal.token;
                            let expireDate = data.tokenRenewal.expires;
                            $cookies.put("loginToken", newToken, {"path": "/", "expires": expireDate, "secure": true, "samesite": "lax"});
                            window.location = "/items/details.html?id=" + data.id;
                        });
                    };

                    $('#mobModal').on('shown.bs.modal', e => {
                        $('#mobSearchInput').trigger('focus');
                    });

                    function searchMobs(searchString) {
                        let query = [
                            "{",
                                "getMobs(searchString:\"",searchString,"\") {",
                                    "mobs {",
                                        "id ",
                                        "name",
                                    "}",
                                "}",
                            "}"
                        ];
                        $http({
                            url: '/api',
                            method: 'POST',
                            data: {"query": query.join("")}
                        }).then(response => {
                            vm.mobSearchResults = response.data.data.getMobs.mobs;
                        });
                    };

                    function onMobSelected(mob) {
                        vm.item.mobId = mob.id;

                        if (!vm.item.getMob)
                            vm.item.getMob = {};

                        vm.item.getMob.name = mob.name;
                        $('#mobModal').modal('hide');
                    };

                    $('#questModal').on('shown.bs.modal', e => {
                        $('#questSearchInput').trigger('focus');
                    });

                    function searchQuests(searchString) {
                        let query = [
                            "{",
                                "getQuests(searchString:\"",searchString,"\") {",
                                    "quests {",
                                        "id ",
                                        "title",
                                    "}",
                                "}",
                            "}"
                        ];
                        $http({
                            url: '/api',
                            method: 'POST',
                            data: {"query": query.join("")}
                        }).then(response => {
                            vm.questSearchResults = response.data.data.getQuests.quests;
                        });
                    };

                    function onQuestSelected(quest) {
                        vm.item.questId = quest.id;

                        if (!vm.item.getQuest)
                            vm.item.getQuest = {};

                        vm.item.getQuest.title = quest.title;
                        $('#questModal').modal('hide');
                    };
                }
            })();
        </script>
    </body>
</html>
